// ------------------------------------------------------------------------------
//  <auto-generated>
//     This code was generated by a tool (Spike Build).
//     Generated on: 13:51:24
//     Runtime Version: 4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//  </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;
using System.Net;
using System.Linq;
using System.Runtime.Serialization;
using System.Collections.Generic;
using Spike;
using Spike.Hubs;
using Spike.Network;
using Spike.Network.Http;

namespace Spike.Network
{
   #region Class: MyAngularChatProtocol
   ///<summary>
   /// Represents a static class that performs all the necessary initialization routines for MyAngularChatProtocol.
   ///</summary>
   public static class MyAngularChatProtocol
   {
      ///<summary>
      /// Performs the necessary configuration. This method is automatically invoked by Spike-Engine runtime.
      ///</summary>
      [InvokeAt(InvokeAtType.Configure)]
      public static void Configure()
      {

         // Signature: MyAngularChatProtocol.Pull.JoinNgChat.[].[]
         // Signature Digest: "A1439218"
         PacketIndex.RegisterMetadata(new OperationInfo("A1439218", true, null, CompressionTarget.None, Direction.Pull, null, null, null, null));

         // Signature: MyAngularChatProtocol.Pull.SendNgChatMessage.[].[String]
         // Signature Digest: "2847D0FE"
         PacketIndex.RegisterMetadata(new OperationInfo("2847D0FE", true, null, CompressionTarget.Incoming, Direction.Pull, typeof(SendNgChatMessageRequest), SendNgChatMessageRequest.CreateInstance, null, null));

         // Signature: MyAngularChatProtocol.Push.NgChatMessages.[ListOfByte.String].[]
         // Signature Digest: "96066602"
         PacketIndex.RegisterMetadata(new OperationInfo("96066602", true, null, CompressionTarget.Outgoing, Direction.Push, null, null, typeof(NgChatMessagesInform), NgChatMessagesInform.CreateInstance));

         ProtocolInfo.Register("MyAngularChatProtocol", "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxQcm90b2NvbCBOYW1lPSJNeUFuZ3VsYXJDaGF0UHJvdG9jb2wiIHhtbG5zPSJodHRwOi8vd3d3LnNwaWtlLWVuZ2luZS5jb20vMjAxMS9zcG1sIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIj4NCiAgPE9wZXJhdGlvbnM+DQoNCiAgICA8IS0tIFNpbXBsZSBqb2luIGNoYXQgb3BlcmF0aW9uIHRoYXQgcHV0cyB0aGUgY2xpZW50IHRvIHRoZSBjaGF0IHJvb20gLS0+DQogICAgPE9wZXJhdGlvbiBOYW1lPSJKb2luTmdDaGF0Ig0KICAgICAgICAgICAgICAgU3VwcHJlc3NTZWN1cml0eT0idHJ1ZSIgLz4NCg0KICAgIDwhLS0gU2ltcGxlIHNlbmQgbWVzc2FnZSBvcGVyYXRpb24gdGhhdCBicm9hZGNhc3QgdGhlIG1lc3NhZ2UgdG8gdGhlIGNoYXQgcm9vbSAtLT4NCiAgICA8T3BlcmF0aW9uIE5hbWU9IlNlbmROZ0NoYXRNZXNzYWdlIg0KICAgICAgICAgICAgICAgU3VwcHJlc3NTZWN1cml0eT0idHJ1ZSINCiAgICAgICAgICAgICAgIENvbXByZXNzaW9uPSJJbmNvbWluZyI+DQogICAgICA8SW5jb21pbmc+DQogICAgICAgIDxNZW1iZXIgTmFtZT0iTWVzc2FnZSIgVHlwZT0iU3RyaW5nIiAvPg0KICAgICAgPC9JbmNvbWluZz4NCiAgICA8L09wZXJhdGlvbj4NCg0KICAgIDwhLS0gQSBwdXNoIG9wZXJhdGlvbiAoc2VydmVyIHRvIGNsaWVudCkgdGhhdCBzZW5kcyB0aGUgbWVzc2FnZXMgdG8gdGhlIGNsaWVudHMgLS0+DQogICAgPE9wZXJhdGlvbiBOYW1lPSJOZ0NoYXRNZXNzYWdlcyINCiAgICAgICAgICAgICAgIFN1cHByZXNzU2VjdXJpdHk9InRydWUiDQogICAgICAgICAgICAgICBDb21wcmVzc2lvbj0iT3V0Z29pbmciDQogICAgICAgICAgICAgICBEaXJlY3Rpb249IlB1c2giPg0KICAgICAgPE91dGdvaW5nPg0KICAgICAgICA8TWVtYmVyIE5hbWU9IkF2YXRhciIgVHlwZT0iTGlzdE9mQnl0ZSIgLz4NCiAgICAgICAgPE1lbWJlciBOYW1lPSJNZXNzYWdlIiBUeXBlPSJTdHJpbmciIC8+DQogICAgICA8L091dGdvaW5nPg0KICAgIDwvT3BlcmF0aW9uPg0KDQogICAgDQogIDwvT3BlcmF0aW9ucz4NCjwvUHJvdG9jb2w+");
      }

      ///<summary>
      /// Performs the necessary initaliazation. This method is automatically invoked by Spike-Engine runtime.
      ///</summary>
      [InvokeAt(InvokeAtType.Initialize)]
      public static void Initialize()
      {

         // MyAngularChatProtocol.Pull.JoinNgChat.[].[]
         PacketHandlers.Register("A1439218", InternalJoinNgChat);

         // MyAngularChatProtocol.Pull.SendNgChatMessage.[].[String]
         PacketHandlers.Register("2847D0FE", InternalSendNgChatMessage);
      }
      ///<summary>
      /// Event that is invoked when a request for JoinNgChat operation comes in.
      ///</summary>
      public static event RequestHandler JoinNgChat;

      private static void InternalJoinNgChat(IClient client, Packet requestPacket)
      {
         if(JoinNgChat != null)
            JoinNgChat(client);
      }
      ///<summary>
      /// Event that is invoked when a request for SendNgChatMessage operation comes in.
      ///</summary>
      public static event RequestHandler<SendNgChatMessageRequest> SendNgChatMessage;

      private static void InternalSendNgChatMessage(IClient client, Packet requestPacket)
      {
         SendNgChatMessageRequest request = requestPacket as SendNgChatMessageRequest;
         if(SendNgChatMessage != null)
            SendNgChatMessage(client, request);
      }
   }
   #endregion

   #region Class: MyAngularChatProtocolExtensions
   ///<summary>
   /// Represents a static class that contains IClient extension methods for MyAngularChatProtocol.
   ///</summary>
   public static class MyAngularChatProtocolExtensions
   {
      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendNgChatMessagesInform(this IClient client, byte[] Avatar, String Message)
      {
         NgChatMessagesInform packet = NgChatMessagesInform.Metadata.AcquireInform() as NgChatMessagesInform;
         packet.Avatar = Avatar;
         packet.Message = Message;
         client.Send(packet);
      }

      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendNgChatMessagesInform(this IClient client, NgChatMessagesInform packet)
      {
         client.Send(packet);
      }
      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendNgChatMessagesInform(this IClient[] clients, byte[] Avatar, String Message)
      {
         using(NgChatMessagesInform packet = NgChatMessagesInform.Metadata.AcquireInform() as NgChatMessagesInform)
         {
            packet.Lifetime = PacketLifetime.Manual;
            packet.Avatar = Avatar;
            packet.Message = Message;
            for (int i = 0; i < clients.Length; ++i)
               clients[i].Send(packet);
         }
      }

      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendNgChatMessagesInform(this IClient[] clients, NgChatMessagesInform packet)
      {
         packet.Lifetime = PacketLifetime.Manual;
         for (int i = 0; i < clients.Length; ++i)
            clients[i].Send(packet);
      }
      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendNgChatMessagesInform(this List<IClient> clients, byte[] Avatar, String Message)
      {
         using(NgChatMessagesInform packet = NgChatMessagesInform.Metadata.AcquireInform() as NgChatMessagesInform)
         {
            packet.Lifetime = PacketLifetime.Manual;
            packet.Avatar = Avatar;
            packet.Message = Message;
            for (int i = 0; i < clients.Count; ++i)
               clients[i].Send(packet);
         }
      }

      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendNgChatMessagesInform(this List<IClient> clients, NgChatMessagesInform packet)
      {
         packet.Lifetime = PacketLifetime.Manual;
         for (int i = 0; i < clients.Count; ++i)
            clients[i].Send(packet);
      }
      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendNgChatMessagesInform(this IEnumerable<IClient> clients, byte[] Avatar, String Message)
      {
         using(NgChatMessagesInform packet = NgChatMessagesInform.Metadata.AcquireInform() as NgChatMessagesInform)
         {
            packet.Lifetime = PacketLifetime.Manual;
            packet.Avatar = Avatar;
            packet.Message = Message;
            foreach(var client in clients)
               client.Send(packet);
         }
      }

      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendNgChatMessagesInform(this IEnumerable<IClient> clients, NgChatMessagesInform packet)
      {
         packet.Lifetime = PacketLifetime.Manual;
         foreach(var client in clients)
            client.Send(packet);
      }
   }
   #endregion

   #region Class: MyAngularChatProtocolHubBase
   ///<summary>
   /// Represents an optional, abstract hub class for MyAngularChatProtocol.
   ///</summary>
   public abstract class MyAngularChatProtocolHubBase : Hub
   {
      /// <summary>
      /// Constructs a new instance of a <see cref="MyAngularChatProtocolHubBase"/> class. The instance will be locked
      /// with a default randomly generated publish key.
      /// </summary>
      public MyAngularChatProtocolHubBase() : base()
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="MyAngularChatProtocolHubBase"/> class. The instance will be locked
      /// with a default randomly generated publish key.
      /// </summary>
      /// <param name="name">The name of the hub.</param>
      public MyAngularChatProtocolHubBase(string name) : base(name)
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="MyAngularChatProtocolHubBase"/> class. The instance will be locked with a 
      /// default randomly generated publish key.
      /// </summary>
      /// <param name="autoRegister">Whether the hub should be automatically registered in the provider or not.</param>
      /// <param name="name">The name of the hub.</param>
      public MyAngularChatProtocolHubBase(string name, bool autoRegister)
          : base(name, autoRegister)
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="MyAngularChatProtocolHubBase"/> class. 
      /// </summary>
      /// <param name="name">The name of the hub.</param>
      /// <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
      /// <param name="defaultSubscribeKey">The default subscribe key to apply to this hub.</param>
      public MyAngularChatProtocolHubBase(string name, string defaultPublishKey, string defaultSubscribeKey)
          : base(name, defaultPublishKey, defaultSubscribeKey)
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="MyAngularChatProtocolHubBase"/> class.
      /// </summary>
      /// <param name="name">The name of the hub.</param>
      /// <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
      public MyAngularChatProtocolHubBase(string name, string defaultPublishKey)
          : base(name, defaultPublishKey)
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="MyAngularChatProtocolHubBase"/> class.
      /// </summary>
      /// <param name="name">The name of the hub.</param>
      /// <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
      /// <param name="autoRegister">Whether the hub should be automatically registered in the provider or not.</param>
      public MyAngularChatProtocolHubBase(string name, string defaultPublishKey, bool autoRegister)
          : base(name, defaultPublishKey, autoRegister)
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="MyAngularChatProtocolHubBase"/> class.
      /// </summary>
      /// <param name="name">The name of the hub.</param>
      /// <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
      /// <param name="defaultSubscribeKey">The default subscribe key to apply to this hub.</param>
      /// <param name="autoRegister">Whether the hub should be automatically registered in the provider or not.</param>
      public MyAngularChatProtocolHubBase(string name, string defaultPublishKey, string defaultSubscribeKey, bool autoRegister)
          : base(name, defaultPublishKey, defaultSubscribeKey,  autoRegister)
      {
      }

      /// <summary>
      /// Invoked when a new instance of a <see cref="Hub"/> is constructed.
      /// </summary>
      protected override void OnAfterConstruct()
      {
         // Call the base
         base.OnAfterConstruct();

         // Hook the handlers
         MyAngularChatProtocol.JoinNgChat += this.OnJoinNgChat;
         MyAngularChatProtocol.SendNgChatMessage += this.OnSendNgChatMessage;
      }

      /// <summary>
      /// Releases the unmanaged resources used by the ByteSTream class and optionally releases the managed resources.
      /// </summary>
      /// <param name="disposing">If set to true, release both managed and unmanaged resources, othewise release only unmanaged resources. </param>
      protected override void Dispose(bool disposing)
      {
         // Call the base
         base.Dispose(disposing);
         
         // Unhook the handlers.
         MyAngularChatProtocol.JoinNgChat -= this.OnJoinNgChat;
         MyAngularChatProtocol.SendNgChatMessage -= this.OnSendNgChatMessage;
      }


      /// <summary>
      /// Invoked when an incoming request for JoinNgChat operation comes in.
      /// </summary>
      public abstract void OnJoinNgChat(IClient client);

      /// <summary>
      /// Invoked when an incoming request for SendNgChatMessage operation comes in.
      /// </summary>
      public abstract void OnSendNgChatMessage(IClient client, SendNgChatMessageRequest packet);
   }
   #endregion

   #region Packet: SendNgChatMessageRequest
   /// <summary>
   /// SendNgChatMessageRequest defines a packet container object for the SendNgChatMessage operation.
   /// </summary>
   public sealed class SendNgChatMessageRequest: SecpPacket
   {

      /// <summary>
      /// Creates a new empty instance of the packet
      /// </summary>
      public SendNgChatMessageRequest() : base(PacketKey.Get("2847D0FE"))
      {
      }

      /// <summary>
      /// Creates a new instance of the packet by initializing all its fields
      /// </summary>
      public SendNgChatMessageRequest(String Message) : base(PacketKey.Get("2847D0FE"))
      {
         this.Message = Message;
      }


      /// <summary>
      /// Gets or sets the Message field. 
      /// </summary>
      public String Message;

      /// <summary>
      /// Gets the direction of the packet: whether the first 
      /// call is initiated on server (Push) or client (Pull)
      /// </summary>
      public sealed override PacketDirection Direction
      {
         get { return PacketDirection.Incoming; } 
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Write(PacketWriter Writer)
      {
         Writer.Write(Message);
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Read(PacketReader Reader)
      {
         this.Message = Reader.ReadString();
      }

      /// <summary>
      /// A factory method that constructs an instance of SendNgChatMessageRequest packet.
      /// </summary>
      public static Packet CreateInstance()
      {
         return new SendNgChatMessageRequest();
      }

      /// <summary>
      /// Gets the metadata for the operation which contains the given packet type.
      /// </summary>
      public static OperationInfo Metadata
      {
         get
         {
            if(OpInfo == null)
            {
               OpInfo = PacketIndex.GetMetadata("2847D0FE");
            }
            return OpInfo;
         }
      }

      /// <summary>
      /// Cached metadata reference for faster access. 
      /// </summary>
      private static OperationInfo OpInfo = null;
   }
   #endregion

   #region Packet: NgChatMessagesInform
   /// <summary>
   /// NgChatMessagesInform defines a packet container object for the NgChatMessages operation.
   /// </summary>
   public sealed class NgChatMessagesInform: SecpPacket
   {

      /// <summary>
      /// Creates a new empty instance of the packet
      /// </summary>
      public NgChatMessagesInform() : base(PacketKey.Get("96066602"))
      {
      }

      /// <summary>
      /// Creates a new instance of the packet by initializing all its fields
      /// </summary>
      public NgChatMessagesInform(byte[] Avatar, String Message) : base(PacketKey.Get("96066602"))
      {
         this.Avatar = Avatar;
         this.Message = Message;
      }


      /// <summary>
      /// Gets or sets the Avatar field. 
      /// </summary>
      public byte[] Avatar;

      /// <summary>
      /// Gets or sets the Message field. 
      /// </summary>
      public String Message;

      /// <summary>
      /// Gets the direction of the packet: whether the first 
      /// call is initiated on server (Push) or client (Pull)
      /// </summary>
      public sealed override PacketDirection Direction
      {
         get { return PacketDirection.Outgoing; } 
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Write(PacketWriter Writer)
      {
         Writer.Write(Avatar);
         Writer.Write(Message);
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Read(PacketReader Reader)
      {
         this.Avatar = Reader.ReadByteArray();
         this.Message = Reader.ReadString();
      }

      /// <summary>
      /// A factory method that constructs an instance of NgChatMessagesInform packet.
      /// </summary>
      public static Packet CreateInstance()
      {
         return new NgChatMessagesInform();
      }

      /// <summary>
      /// Gets the metadata for the operation which contains the given packet type.
      /// </summary>
      public static OperationInfo Metadata
      {
         get
         {
            if(OpInfo == null)
            {
               OpInfo = PacketIndex.GetMetadata("96066602");
            }
            return OpInfo;
         }
      }

      /// <summary>
      /// Cached metadata reference for faster access. 
      /// </summary>
      private static OperationInfo OpInfo = null;
   }
   #endregion
}
